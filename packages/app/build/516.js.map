{"version":3,"file":"516.js","mappings":"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","sources":["webpack://@snort/app/./src/Wallet/LNCWallet.ts"],"sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _LNCWallet_lnc, _LNCWallet_log;\nimport LNC from \"@lightninglabs/lnc-web\";\nimport { unwrap } from \"SnortUtils\";\nimport { prToWalletInvoice, WalletError, WalletErrorCode, WalletInvoiceState, } from \"Wallet\";\nimport debug from \"debug\";\nvar Payment_PaymentStatus;\n(function (Payment_PaymentStatus) {\n    Payment_PaymentStatus[\"UNKNOWN\"] = \"UNKNOWN\";\n    Payment_PaymentStatus[\"IN_FLIGHT\"] = \"IN_FLIGHT\";\n    Payment_PaymentStatus[\"SUCCEEDED\"] = \"SUCCEEDED\";\n    Payment_PaymentStatus[\"FAILED\"] = \"FAILED\";\n    Payment_PaymentStatus[\"UNRECOGNIZED\"] = \"UNRECOGNIZED\";\n})(Payment_PaymentStatus || (Payment_PaymentStatus = {}));\nexport class LNCWallet {\n    constructor(pairingPhrase, password) {\n        _LNCWallet_lnc.set(this, void 0);\n        _LNCWallet_log.set(this, debug(\"LNC\"));\n        __classPrivateFieldSet(this, _LNCWallet_lnc, new LNC({\n            pairingPhrase,\n            password,\n        }), \"f\");\n    }\n    canAutoLogin() {\n        return false;\n    }\n    isReady() {\n        return __classPrivateFieldGet(this, _LNCWallet_lnc, \"f\").isReady;\n    }\n    static async Initialize(pairingPhrase) {\n        const lnc = new LNCWallet(pairingPhrase);\n        await lnc.login();\n        return lnc;\n    }\n    static Empty() {\n        return new LNCWallet();\n    }\n    setPassword(pw) {\n        if (__classPrivateFieldGet(this, _LNCWallet_lnc, \"f\").credentials.password && pw !== __classPrivateFieldGet(this, _LNCWallet_lnc, \"f\").credentials.password) {\n            throw new WalletError(WalletErrorCode.GeneralError, \"Password is already set, cannot update password\");\n        }\n        __classPrivateFieldGet(this, _LNCWallet_lnc, \"f\").credentials.password = pw;\n    }\n    createAccount() {\n        throw new Error(\"Not implemented\");\n    }\n    async getInfo() {\n        const nodeInfo = await __classPrivateFieldGet(this, _LNCWallet_lnc, \"f\").lnd.lightning.getInfo();\n        return {\n            nodePubKey: nodeInfo.identityPubkey,\n            alias: nodeInfo.alias,\n        };\n    }\n    close() {\n        if (__classPrivateFieldGet(this, _LNCWallet_lnc, \"f\").isConnected) {\n            __classPrivateFieldGet(this, _LNCWallet_lnc, \"f\").disconnect();\n        }\n        return Promise.resolve(true);\n    }\n    async login(password) {\n        if (password) {\n            this.setPassword(password);\n            __classPrivateFieldGet(this, _LNCWallet_lnc, \"f\").run();\n        }\n        await __classPrivateFieldGet(this, _LNCWallet_lnc, \"f\").connect();\n        while (!__classPrivateFieldGet(this, _LNCWallet_lnc, \"f\").isConnected) {\n            await new Promise(resolve => {\n                setTimeout(resolve, 100);\n            });\n        }\n        return true;\n    }\n    async getBalance() {\n        const rsp = await __classPrivateFieldGet(this, _LNCWallet_lnc, \"f\").lnd.lightning.channelBalance();\n        __classPrivateFieldGet(this, _LNCWallet_log, \"f\").call(this, rsp);\n        return parseInt(rsp.localBalance?.sat ?? \"0\");\n    }\n    async createInvoice(req) {\n        const rsp = await __classPrivateFieldGet(this, _LNCWallet_lnc, \"f\").lnd.lightning.addInvoice({\n            memo: req.memo,\n            value: req.amount.toString(),\n            expiry: req.expiry?.toString(),\n        });\n        return unwrap(prToWalletInvoice(rsp.paymentRequest));\n    }\n    async payInvoice(pr) {\n        return new Promise((resolve, reject) => {\n            __classPrivateFieldGet(this, _LNCWallet_lnc, \"f\").lnd.router.sendPaymentV2({\n                paymentRequest: pr,\n                timeoutSeconds: 60,\n                feeLimitSat: \"100\",\n            }, msg => {\n                __classPrivateFieldGet(this, _LNCWallet_log, \"f\").call(this, msg);\n                if (msg.status === Payment_PaymentStatus.SUCCEEDED) {\n                    resolve({\n                        preimage: msg.paymentPreimage,\n                        state: WalletInvoiceState.Paid,\n                        timestamp: parseInt(msg.creationTimeNs) / 1e9,\n                    });\n                }\n            }, err => {\n                __classPrivateFieldGet(this, _LNCWallet_log, \"f\").call(this, err);\n                reject(err);\n            });\n        });\n    }\n    async getInvoices() {\n        const invoices = await __classPrivateFieldGet(this, _LNCWallet_lnc, \"f\").lnd.lightning.listPayments({\n            maxPayments: \"10\",\n            reversed: true,\n        });\n        __classPrivateFieldGet(this, _LNCWallet_log, \"f\").call(this, invoices);\n        return invoices.payments.map(a => {\n            const parsedInvoice = prToWalletInvoice(a.paymentRequest);\n            if (!parsedInvoice) {\n                throw new WalletError(WalletErrorCode.InvalidInvoice, `Could not parse ${a.paymentRequest}`);\n            }\n            return {\n                ...parsedInvoice,\n                state: (() => {\n                    switch (a.status) {\n                        case Payment_PaymentStatus.SUCCEEDED:\n                            return WalletInvoiceState.Paid;\n                        case Payment_PaymentStatus.FAILED:\n                            return WalletInvoiceState.Failed;\n                        default:\n                            return WalletInvoiceState.Pending;\n                    }\n                })(),\n                preimage: a.paymentPreimage,\n            };\n        });\n    }\n}\n_LNCWallet_lnc = new WeakMap(), _LNCWallet_log = new WeakMap();\n"],"names":["_LNCWallet_lnc","_LNCWallet_log","Payment_PaymentStatus","__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","LNCWallet","constructor","pairingPhrase","password","set","this","debug","__classPrivateFieldSet","LNC","canAutoLogin","isReady","Initialize","lnc","login","Empty","setPassword","pw","credentials","WalletError","WalletErrorCode","GeneralError","createAccount","Error","getInfo","nodeInfo","lnd","lightning","nodePubKey","identityPubkey","alias","close","isConnected","disconnect","Promise","resolve","run","connect","setTimeout","getBalance","_rsp$localBalance$sat","_rsp$localBalance","rsp","channelBalance","parseInt","localBalance","sat","createInvoice","req","_req$expiry","addInvoice","memo","amount","toString","expiry","unwrap","prToWalletInvoice","paymentRequest","payInvoice","pr","reject","router","sendPaymentV2","timeoutSeconds","feeLimitSat","msg","status","SUCCEEDED","preimage","paymentPreimage","WalletInvoiceState","Paid","timestamp","creationTimeNs","err","getInvoices","invoices","listPayments","maxPayments","reversed","payments","map","a","parsedInvoice","InvalidInvoice","FAILED","Failed","Pending","WeakMap"],"sourceRoot":""}