{"version":3,"file":"334.7d0c202d856d4a5795ad.js","mappings":"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","sources":["webpack://@snort/app/./src/Wallet/LNCWallet.ts"],"sourcesContent":["import LNC from \"@lightninglabs/lnc-web\";\nimport { unwrap } from \"SnortUtils\";\nimport {\n  InvoiceRequest,\n  LNWallet,\n  Login,\n  prToWalletInvoice,\n  WalletError,\n  WalletErrorCode,\n  WalletInfo,\n  WalletInvoice,\n  WalletInvoiceState,\n} from \"Wallet\";\nimport debug from \"debug\";\n\nenum Payment_PaymentStatus {\n  UNKNOWN = \"UNKNOWN\",\n  IN_FLIGHT = \"IN_FLIGHT\",\n  SUCCEEDED = \"SUCCEEDED\",\n  FAILED = \"FAILED\",\n  UNRECOGNIZED = \"UNRECOGNIZED\",\n}\n\nexport class LNCWallet implements LNWallet {\n  #lnc: LNC;\n  readonly #log = debug(\"LNC\");\n\n  private constructor(pairingPhrase?: string, password?: string) {\n    this.#lnc = new LNC({\n      pairingPhrase,\n      password,\n    });\n  }\n\n  canAutoLogin(): boolean {\n    return false;\n  }\n\n  isReady(): boolean {\n    return this.#lnc.isReady;\n  }\n\n  static async Initialize(pairingPhrase: string) {\n    const lnc = new LNCWallet(pairingPhrase);\n    await lnc.login();\n    return lnc;\n  }\n\n  static Empty() {\n    return new LNCWallet();\n  }\n\n  setPassword(pw: string) {\n    if (this.#lnc.credentials.password && pw !== this.#lnc.credentials.password) {\n      throw new WalletError(WalletErrorCode.GeneralError, \"Password is already set, cannot update password\");\n    }\n    this.#lnc.credentials.password = pw;\n  }\n\n  createAccount(): Promise<WalletError | Login> {\n    throw new Error(\"Not implemented\");\n  }\n\n  async getInfo(): Promise<WalletInfo> {\n    const nodeInfo = await this.#lnc.lnd.lightning.getInfo();\n    return {\n      nodePubKey: nodeInfo.identityPubkey,\n      alias: nodeInfo.alias,\n    } as WalletInfo;\n  }\n\n  close(): Promise<boolean> {\n    if (this.#lnc.isConnected) {\n      this.#lnc.disconnect();\n    }\n    return Promise.resolve(true);\n  }\n\n  async login(password?: string): Promise<boolean> {\n    if (password) {\n      this.setPassword(password);\n      this.#lnc.run();\n    }\n    await this.#lnc.connect();\n    while (!this.#lnc.isConnected) {\n      await new Promise(resolve => {\n        setTimeout(resolve, 100);\n      });\n    }\n    return true;\n  }\n\n  async getBalance(): Promise<number> {\n    const rsp = await this.#lnc.lnd.lightning.channelBalance();\n    this.#log(rsp);\n    return parseInt(rsp.localBalance?.sat ?? \"0\");\n  }\n\n  async createInvoice(req: InvoiceRequest): Promise<WalletInvoice> {\n    const rsp = await this.#lnc.lnd.lightning.addInvoice({\n      memo: req.memo,\n      value: req.amount.toString(),\n      expiry: req.expiry?.toString(),\n    });\n    return unwrap(prToWalletInvoice(rsp.paymentRequest));\n  }\n\n  async payInvoice(pr: string): Promise<WalletInvoice> {\n    return new Promise((resolve, reject) => {\n      this.#lnc.lnd.router.sendPaymentV2(\n        {\n          paymentRequest: pr,\n          timeoutSeconds: 60,\n          feeLimitSat: \"100\",\n        },\n        msg => {\n          this.#log(msg);\n          if (msg.status === Payment_PaymentStatus.SUCCEEDED) {\n            resolve({\n              preimage: msg.paymentPreimage,\n              state: WalletInvoiceState.Paid,\n              timestamp: parseInt(msg.creationTimeNs) / 1e9,\n            } as WalletInvoice);\n          }\n        },\n        err => {\n          this.#log(err);\n          reject(err);\n        }\n      );\n    });\n  }\n\n  async getInvoices(): Promise<WalletInvoice[]> {\n    const invoices = await this.#lnc.lnd.lightning.listPayments({\n      maxPayments: \"10\",\n      reversed: true,\n    });\n\n    this.#log(invoices);\n    return invoices.payments.map(a => {\n      const parsedInvoice = prToWalletInvoice(a.paymentRequest);\n      if (!parsedInvoice) {\n        throw new WalletError(WalletErrorCode.InvalidInvoice, `Could not parse ${a.paymentRequest}`);\n      }\n      return {\n        ...parsedInvoice,\n        state: (() => {\n          switch (a.status) {\n            case Payment_PaymentStatus.SUCCEEDED:\n              return WalletInvoiceState.Paid;\n            case Payment_PaymentStatus.FAILED:\n              return WalletInvoiceState.Failed;\n            default:\n              return WalletInvoiceState.Pending;\n          }\n        })(),\n        preimage: a.paymentPreimage,\n      } as WalletInvoice;\n    });\n  }\n}\n"],"names":["Payment_PaymentStatus","_lnc","WeakMap","_log","LNCWallet","constructor","pairingPhrase","password","_classPrivateFieldInitSpec","writable","value","debug","this","LNC","canAutoLogin","isReady","_classPrivateFieldGet","static","lnc","login","setPassword","pw","credentials","WalletError","WalletErrorCode","createAccount","Error","async","nodeInfo","lnd","lightning","getInfo","nodePubKey","identityPubkey","alias","close","isConnected","disconnect","Promise","resolve","run","connect","setTimeout","_rsp$localBalance$sat","_rsp$localBalance","rsp","channelBalance","call","parseInt","localBalance","sat","req","_req$expiry","addInvoice","memo","amount","toString","expiry","unwrap","prToWalletInvoice","paymentRequest","pr","reject","router","sendPaymentV2","timeoutSeconds","feeLimitSat","msg","status","SUCCEEDED","preimage","paymentPreimage","state","WalletInvoiceState","timestamp","creationTimeNs","err","invoices","listPayments","maxPayments","reversed","payments","map","a","parsedInvoice","FAILED"],"sourceRoot":""}